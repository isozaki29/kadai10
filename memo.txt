★Dependency injection
メリット
・疎結合を保つ
・インスタンス化するコードの排除
仕組み
ビルド時にクラスを共通インスタンス化してそれを使う

★Constractor Injection
呼び出したいクラスをnewしなくても、メソッドを呼び出すことができる
→@Repository,@Serviceなどのアノテーションが付与されたクラスは、SpringBoot起動時に、フレームワークによってnewされて、コンテナに格納される

★orElseThrow
・引数なしの場合
NoSuchElementExceptionをスローする
value.orElseThrow();

・引数ありの場合
orElseThrowの引数には例外をスローする例外クラスのオブジェクトを指定できる
value.orElseThrow(() -> new RuntimeException())

★@ExceptionHandler
Controller内で指定した例外クラスが発生した場合は、メソッドでハンドリングする
@ExceptionHandler(value = 例外クラス.class)

docker compose exec db mysql -uroot -p

★useGeneratedKeys
引数でわたされたオブジェクトのフィールド変数をkeyPropertyに指定して、AUTO_INCREMENTの値を取得する

@Options(useGeneratedKeys = true, keyProperty = "id")

★AllArgsConstructor
すべてのフィールドを引数に持つコンストラクタを自動生成